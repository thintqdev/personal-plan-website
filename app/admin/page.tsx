"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, User, Calendar, Plus, Trash2, Save, Upload, Quote, Filter } from "lucide-react"
import Link from "next/link"

export default function AdminPage() {
  const [profile, setProfile] = useState({
    name: "Nguy·ªÖn VƒÉn A",
    role: "L·∫≠p tr√¨nh vi√™n & H·ªçc vi√™n ti·∫øng Nh·∫≠t",
    joinDate: "15/01/2024",
    goal: "JLPT N3",
    streak: 45,
    avatar: "/friendly-person-avatar.png",
  })

  const [quotes, setQuotes] = useState([
    "Th√†nh c√¥ng kh√¥ng ph·∫£i l√† ch√¨a kh√≥a c·ªßa h·∫°nh ph√∫c. H·∫°nh ph√∫c l√† ch√¨a kh√≥a c·ªßa th√†nh c√¥ng.",
    "ƒê·ª´ng ch·ªù ƒë·ª£i c∆° h·ªôi, h√£y t·∫°o ra n√≥.",
    "M·ªói ng√†y l√† m·ªôt c∆° h·ªôi m·ªõi ƒë·ªÉ tr·ªü th√†nh phi√™n b·∫£n t·ªët h∆°n c·ªßa ch√≠nh m√¨nh.",
    "K·ª∑ lu·∫≠t l√† c·∫ßu n·ªëi gi·ªØa m·ª•c ti√™u v√† th√†nh t·ª±u.",
    "H√†nh tr√¨nh ng√†n d·∫∑m b·∫Øt ƒë·∫ßu t·ª´ m·ªôt b∆∞·ªõc ch√¢n.",
  ])

  const [newQuote, setNewQuote] = useState("")

  const [selectedDayFilter, setSelectedDayFilter] = useState("T·∫•t c·∫£")

  const [newTask, setNewTask] = useState({
    time: "",
    task: "",
    type: "Study",
    day: "Th·ª© Hai",
  })

  const [tasks, setTasks] = useState([
    {
      id: "1",
      day: "Th·ª© Hai",
      time: "06:30 - 07:30",
      task: "Th√≥i quen bu·ªïi s√°ng + Podcast üáØüáµ",
      type: "Study",
    },
    {
      id: "2",
      day: "Th·ª© Hai",
      time: "08:00 - 18:00",
      task: "L√†m vi·ªác (t·∫≠p trung 3 nhi·ªám v·ª• ch√≠nh)",
      type: "Work",
    },
    {
      id: "3",
      day: "Th·ª© Ba",
      time: "07:00 - 08:00",
      task: "T·∫≠p th·ªÉ d·ª•c bu·ªïi s√°ng",
      type: "Gym",
    },
    {
      id: "4",
      day: "Th·ª© T∆∞",
      time: "19:00 - 20:00",
      task: "H·ªçc ti·∫øng Nh·∫≠t - Kanji",
      type: "Study",
    },
  ])

  const taskTypes = ["Study", "Work", "Gym", "Relax", "Social"]
  const days = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"]
  const dayFilterOptions = ["T·∫•t c·∫£", ...days]

  const handleProfileUpdate = (field: string, value: string) => {
    setProfile((prev) => ({ ...prev, [field]: value }))
  }

  const handleAddQuote = () => {
    if (newQuote.trim()) {
      setQuotes((prev) => [...prev, newQuote.trim()])
      setNewQuote("")
    }
  }

  const handleDeleteQuote = (index: number) => {
    setQuotes((prev) => prev.filter((_, i) => i !== index))
  }

  const handleAddTask = () => {
    if (newTask.time && newTask.task) {
      const task = {
        id: Date.now().toString(),
        ...newTask,
      }
      setTasks((prev) => [...prev, task])
      setNewTask({ time: "", task: "", type: "Study", day: "Th·ª© Hai" })
    }
  }

  const handleDeleteTask = (id: string) => {
    setTasks((prev) => prev.filter((task) => task.id !== id))
  }

  const filteredTasks = selectedDayFilter === "T·∫•t c·∫£" ? tasks : tasks.filter((task) => task.day === selectedDayFilter)

  const getTypeColor = (type: string) => {
    const colors = {
      Study: "bg-blue-100 text-blue-800",
      Work: "bg-green-100 text-green-800",
      Gym: "bg-orange-100 text-orange-800",
      Relax: "bg-purple-100 text-purple-800",
      Social: "bg-pink-100 text-pink-800",
    }
    return colors[type as keyof typeof colors] || "bg-gray-100 text-gray-800"
  }

  return (
    <div className="min-h-screen bg-background">
      <div className="container mx-auto px-3 sm:px-4 py-4 sm:py-8">
        {/* Header */}
        <div className="flex items-center gap-4 mb-6 sm:mb-8">
          <Link href="/">
            <Button variant="outline" size="sm">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Quay l·∫°i
            </Button>
          </Link>
          <h1 className="text-2xl sm:text-3xl font-bold font-serif">Admin - Qu·∫£n l√Ω ThinPlan</h1>
        </div>

        <div className="grid grid-cols-1 xl:grid-cols-3 gap-6 sm:gap-8">
          {/* Profile Management */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <User className="w-5 h-5 text-primary" />
                Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 sm:space-y-6">
              <div className="flex flex-col items-center gap-4">
                <Avatar className="w-20 h-20 sm:w-24 sm:h-24 border-4 border-primary">
                  <AvatarImage src={profile.avatar || "/placeholder.svg"} />
                  <AvatarFallback className="text-xl sm:text-2xl bg-primary text-primary-foreground">TP</AvatarFallback>
                </Avatar>
                <Button variant="outline" size="sm">
                  <Upload className="w-4 h-4 mr-2" />
                  ƒê·ªïi avatar
                </Button>
              </div>

              <div className="space-y-4">
                <div>
                  <Label htmlFor="name" className="text-sm font-medium">
                    H·ªç t√™n
                  </Label>
                  <Input
                    id="name"
                    value={profile.name}
                    onChange={(e) => handleProfileUpdate("name", e.target.value)}
                    className="mt-1"
                  />
                </div>

                <div>
                  <Label htmlFor="role" className="text-sm font-medium">
                    Vai tr√≤
                  </Label>
                  <Input
                    id="role"
                    value={profile.role}
                    onChange={(e) => handleProfileUpdate("role", e.target.value)}
                    className="mt-1"
                  />
                </div>

                <div>
                  <Label htmlFor="goal" className="text-sm font-medium">
                    M·ª•c ti√™u
                  </Label>
                  <Input
                    id="goal"
                    value={profile.goal}
                    onChange={(e) => handleProfileUpdate("goal", e.target.value)}
                    className="mt-1"
                  />
                </div>

                <div>
                  <Label htmlFor="streak" className="text-sm font-medium">
                    Streak (ng√†y)
                  </Label>
                  <Input
                    id="streak"
                    type="number"
                    value={profile.streak}
                    onChange={(e) => handleProfileUpdate("streak", e.target.value)}
                    className="mt-1"
                  />
                </div>

                <Button className="w-full">
                  <Save className="w-4 h-4 mr-2" />
                  L∆∞u th√¥ng tin
                </Button>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Quote className="w-5 h-5 text-primary" />
                Qu·∫£n l√Ω c√¢u t·∫°o ƒë·ªông l·ª±c
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 sm:space-y-6">
              {/* Add New Quote */}
              <div className="space-y-4 p-4 bg-muted/30 rounded-lg">
                <h3 className="font-semibold text-sm sm:text-base">Th√™m c√¢u ch√¢m ng√¥n m·ªõi</h3>

                <div>
                  <Label htmlFor="newQuote" className="text-sm">
                    C√¢u ch√¢m ng√¥n
                  </Label>
                  <Textarea
                    id="newQuote"
                    placeholder="Nh·∫≠p c√¢u t·∫°o ƒë·ªông l·ª±c..."
                    value={newQuote}
                    onChange={(e) => setNewQuote(e.target.value)}
                    className="mt-1"
                    rows={3}
                  />
                </div>

                <Button onClick={handleAddQuote} className="w-full">
                  <Plus className="w-4 h-4 mr-2" />
                  Th√™m c√¢u ch√¢m ng√¥n
                </Button>
              </div>

              {/* Quotes List */}
              <div className="space-y-3">
                <h3 className="font-semibold text-sm sm:text-base">Danh s√°ch c√¢u ch√¢m ng√¥n</h3>
                <div className="max-h-96 overflow-y-auto space-y-2">
                  {quotes.map((quote, index) => (
                    <div key={index} className="flex items-start gap-3 p-3 bg-card rounded-lg border">
                      <div className="flex-1 min-w-0">
                        <p className="text-sm italic break-words">"{quote}"</p>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDeleteQuote(index)}
                        className="text-red-600 hover:text-red-700 hover:bg-red-50 flex-shrink-0"
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Plan Management */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="w-5 h-5 text-primary" />
                Qu·∫£n l√Ω k·∫ø ho·∫°ch
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4 sm:space-y-6">
              {/* Add New Task */}
              <div className="space-y-4 p-4 bg-muted/30 rounded-lg">
                <h3 className="font-semibold text-sm sm:text-base">Th√™m c√¥ng vi·ªác m·ªõi</h3>

                <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                  <div>
                    <Label htmlFor="day" className="text-sm">
                      Ng√†y
                    </Label>
                    <Select
                      value={newTask.day}
                      onValueChange={(value) => setNewTask((prev) => ({ ...prev, day: value }))}
                    >
                      <SelectTrigger className="mt-1">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {days.map((day) => (
                          <SelectItem key={day} value={day}>
                            {day}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="type" className="text-sm">
                      Lo·∫°i
                    </Label>
                    <Select
                      value={newTask.type}
                      onValueChange={(value) => setNewTask((prev) => ({ ...prev, type: value }))}
                    >
                      <SelectTrigger className="mt-1">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {taskTypes.map((type) => (
                          <SelectItem key={type} value={type}>
                            {type}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div>
                  <Label htmlFor="time" className="text-sm">
                    Th·ªùi gian
                  </Label>
                  <Input
                    id="time"
                    placeholder="VD: 08:00 - 09:00"
                    value={newTask.time}
                    onChange={(e) => setNewTask((prev) => ({ ...prev, time: e.target.value }))}
                    className="mt-1"
                  />
                </div>

                <div>
                  <Label htmlFor="task" className="text-sm">
                    C√¥ng vi·ªác
                  </Label>
                  <Textarea
                    id="task"
                    placeholder="M√¥ t·∫£ c√¥ng vi·ªác..."
                    value={newTask.task}
                    onChange={(e) => setNewTask((prev) => ({ ...prev, task: e.target.value }))}
                    className="mt-1"
                    rows={2}
                  />
                </div>

                <Button onClick={handleAddTask} className="w-full">
                  <Plus className="w-4 h-4 mr-2" />
                  Th√™m c√¥ng vi·ªác
                </Button>
              </div>

              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <h3 className="font-semibold text-sm sm:text-base">Danh s√°ch c√¥ng vi·ªác</h3>
                  <div className="flex items-center gap-2">
                    <Filter className="w-4 h-4 text-muted-foreground" />
                    <Select value={selectedDayFilter} onValueChange={setSelectedDayFilter}>
                      <SelectTrigger className="w-32">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {dayFilterOptions.map((day) => (
                          <SelectItem key={day} value={day}>
                            {day}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="max-h-96 overflow-y-auto space-y-2">
                  {filteredTasks.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                      <Calendar className="w-8 h-8 mx-auto mb-2 opacity-50" />
                      <p className="text-sm">Kh√¥ng c√≥ c√¥ng vi·ªác n√†o</p>
                    </div>
                  ) : (
                    filteredTasks.map((task) => (
                      <div key={task.id} className="flex items-center gap-3 p-3 bg-card rounded-lg border">
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-1">
                            <Badge variant="outline" className="text-xs">
                              {task.day}
                            </Badge>
                            <Badge variant="secondary" className={`${getTypeColor(task.type)} text-xs`}>
                              {task.type}
                            </Badge>
                          </div>
                          <div className="text-xs text-muted-foreground font-mono mb-1">{task.time}</div>
                          <div className="text-sm font-medium break-words">{task.task}</div>
                        </div>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleDeleteTask(task.id)}
                          className="text-red-600 hover:text-red-700 hover:bg-red-50 flex-shrink-0"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    ))
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
